@ UML
@ 웹 프로젝트 진행순서
1단계. 착수
 - 제안요청서(RFP)
2단계. 요구 사항 정의
3단계. 요구 사항 분석
4단계. 설계
5단계. 구현
6단계. 테스트
7단계. 이관
8단계. 운영지원

@ 제안요청서(RFP)
- Request For Proposal
- 발주자(갑)가 특정 과제의 수행에 필요한 요구사항을 체계적으로 정리하여 제시함으로써 제안자(을)가 제안서를 작성하는데 도움을 주기 위한 문서

@ 요구사항
- 문제의 해결 또는 목적 달성을 위하여 고객에 의해 요구되거나, 표준이나 명세 등을 만족하기 위해서 시스템이 가져야할 서비스 또는 제약사항
- 고객이 요구한 사항과 요구하지 않았더라도 당연히 제공되어야 한다고 가정되는 사항들.

@ 요구사항의 중요성
- 참여자들로 하여금 개발되는 소프트웨어 제품을 전체적으로 파악하도록 하여 의사소통 시간을 절약하게 해주는 것
- 상세한 요구사항이 있어야만 산정이 가능하고, 이를 기반으로 계획을 세울 수 있기 때문이다.

@ 요구사항의 분류
1. 기능적 요구사항(Functional Requirements)
 - 목표로 하는 어플리케이션의 구현을 위해 소프트웨어가 가져야 하는 기능적인 속성
 - 목표로 하는 제품의 구현을 위해 소프트웨어가 가져야하는 기능적 속성
ex) Word -> 작성한 글을 저장, 편집, 보기, 프린트, ...
2. 비기능적 요구사항
 - 어플리케이션의 품질 기준 등을 만족시키기 위해 소프트웨어가 가져야하는 성능, 사용의 용이성, 신뢰도, 보안성, 운용상의 제약, 안정성, 유지보수성 등과 같은 행위적 특성으로 시스템의 기능에 관련되지 않은 요구사항
ex) 응답시간, 처리량, 보안 등

@ 요구사항 정의서
- 서비스를 구현하기 위해 거론되는 다양한 요구사항을 명확하게 정리하기 위하여 작성한 것
- 요구사항 명세서라고도 하며 요구사항을 분석하여 명확하고 완전하게 기록하는 것
- 소프트웨어 시스템이 수행해야 할 모든 기능과 구현상의 제약조건에 대해 개발자와 관련자가 합의한 스펙에 대한 사항을 명세한 것.

@ 요구사항 정의서 작성이유
- 프로젝트 전체 규모를 파악
- 구현 가능 여부에 대한 논의
- 커뮤니케이션 비용 절약
- 프로젝트 일정 계획 수립

@ UML(Unified Modeling Language)
- 통합 모델링 언어
- 소프트웨어 공학에서 사용되는 표준화된 범용 모델링 언어로 소프트웨어 개념을 다이어그램으로 그리기 위해 사용하는 시각적인 표기법.
- 프로그램 설계를 표현하기 위해 사용하는 그림으로 된 표기법을 의미함.
- 소프트웨어 시스템, 업무 모델링, 시스템의 산출물을 규정하고 시각화하며 문서화하는 언어이다.

@ UML 필요 이유
- 시스템의 복잡성을 표준적인 표기법으로 모델링하여 단순하게 표현 가능
- 팀 간의 의사소통에 필요
- 대규모 프로젝트 구조의 로드맵을 만들때 유용
- 개발할 시스템 구축에 대한 기초 마련
- 백엔드 문서용으로 사용하기 좋음.

@ UML 종류
1. 유스케이스 다이어그램
 - 시스템의 제공하는 기능과 이용자와의 관계 표현
2. 클래스 다이어그램
 - 클래스 명세와 클래스 간의 관계를 표현
3. 시퀀스 다이어그램
 - 일련의 처리에 있어 제어의 흐름을 표현
=====================
4. 액티비티 다이어그램
5. 콜라보레이션 다이어그램
6. 상태 다이어그램
7. 컴포넌트 다이어그램
8. 배포 다이어그램

@ 유스케이스 다이어그램
- 시스템의 기능적인 요구사항을 설명하기 위한 도구
- Actor와 시스템이 수행하는 활동간의 관계를 표시하며, 시스템의 기능적인 요구사항을 설명하기 위한 도구

@ 시스템의 범위(scope)
- 우리가 개발하고자 하는 시스템을 사각형으로 표시

@ 유스케이스
- 시스템이 어떤 서비스 또는 기능을 제공하는지 명세해 주는 것으로 타원형으로 표시
- 유스케이스 이름은 단순명료하게 기술
ex) 예금조회, 사용자 인증, 리뷰작성 등

@액터
- 액터는 시스템 외부에 존재하며 시스템과 상호작용하는 모든 것
- 이벤트를 완결하기 위해 시스템과 상호 작용하는 개체
- 액터가 사람일 경우, 시스템과 상호작용하는 사용자에 의해 수행되는 역할(Role)을 나타냄

@액터의 종류
1. 프라이머리 액터(Primary Actor)
 - 시스템을 사용함으로써 이득을 얻는 액터
 - 보통 사람을 지칭하고 사람모양으로 표기
 - 보통 시스템 왼쪽에 표기
2. 세컨더리 액터(Secondary Actor)
 - 프라이머리 액터가 이득을 얻기 위해 도움을 주는 액터
 - 보통 외부 시스템을 의미, <<actor>>로 표기
 - 보통 시스템 오른쪽에 표기
-> 액터이름을 특정인으로 지정 불가

@ 액터를 정의해야 하는 이유
- 액터가 수행하는 역할은 유스케이스가 필요한 이유와 결과에 대한 관점을 제공
- 액터에 초점을 맞춤으로써, 시스템이 어떻게 구현될지가 아닌 시스템이 어떻게 사용될지에 집중하기 위함.

@관계(Relationship)
- 액터와 유스케이스, 유스케이스와 유스케이스 사이의 관계를 나타내며, 서로 상호작용한다는 의미로 해석

@ 관계의 종류
1. 연관관계
 - 유스케이스와 액터간 상호작용을 의미하는 관계
 - 실선 화살표
2. 포함관계
 - 한 유스케이스가 다른 유스케이스의 기능을 포함하는 관계( 반드시 해야만 하는 관계)
 - 점선 화살표
3. 확장관계
 - 기본 유스케이스에 특정 조건이나 액터의 선택에 따라 발생하는 유스케이스( 선택적으로 할 수 있는 관계)
 - 방향이 다른 점선 화살표
4. 일반화관계
 - 유사한 유스케이스들 또는 액터들을 추상화한 하나의 유스케이스로 그룹핑하여 이해도를 높인 관계.

@ 아래 문장을 유스케이스 다이어그램으로 표현해보자
1. 게시판 시스템을 만드려고한다. 액터는 사용자가 있다.
2. 사용자는 글을 만들수도 수정할수도 있다.
3. 글을 쓰거나 수정하는 경우 로그인을 해야한다.
4. 글을 작성할 때 경우에 따라서 그림파일을 업로드 할 수 있어야 한다.

@ 클래스 다이어그램
 - UML의 한 종류
 - 시스템을 구성하는 클래스들 간의 관계를 보여줌
 - 시간에 따라 변하지 않는 시스템의 정적인 면을 보여줌

@ 접근제어자
1. public (+) : 어떤 클래스의 객체에서도 접근 가능
2. private (-) : 클래스 내에서 생성된 객체들만 접근 가능
3. protected(#) : 클래스와 동일 패키지 또는 상속관계에 있는 하위 클래스의 객체들만 접근 가능
4. default(~) : 동일 패키지에 있는 클래스의 객체들만이 접근 가능

@ 클래스 다이어그램 관계
1. 일반화관계
2. 실체화관계
3. 의존관계
4. 연관관계
5. 집합관계















